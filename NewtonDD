#------------------------------------------------------------
# Author : Iliass Tiendrebeogo            Nov 2014
#
# Desc : Newton Didided difference Polynomial interpolation
#         
#          
#------------------------------------------------------------
import numpy as np
import matplotlib.pyplot as plt

def coef(x, y):
	'''x : array of data points
	   y : array of f(x)  '''
	x.astype(float)
	y.astype(float)
	n = len(x)
	a = []
	for i in range(n):
		a.append(y[i])

	for j in range(1, n):
		
		for i in range(n-1, j-1, -1):
			a[i] = float(a[i]-a[i-1])/float(x[i]-x[i-j])
			
	return np.array(a) # return an array of coefficient


def Eval(a, x, r):
	''' a : array returned by function coef()
		x : array of data points
		r : the node to interpolate at  '''

	x.astype(float)
	n = len( a ) - 1
	temp = a[n]
	for i in range( n - 1, -1, -1 ):
		temp = temp * ( r - x[i] ) + a[i]
	return temp

#--------------------------Testing---------------------------

print "Test 01"  
x = np.array([0, 2, 3, 4]) # x inputs
y = np.array([7, 11, 28, 63]) # y inputs
print "Coefficients"
a = coef(x, y)

print a
#   Eval
print "Eval"
print "Eval 0 = ", Eval(a, x, 0)
print "Eval 2 = ", Eval(a, x, 2)
print "Eval 3 = ", Eval(a, x, 3)
print "Eval 4 = ", Eval(a, x, 4)
#-------------------------Test 02--------------------------
print "Test 02"
x = np.array([-1, 1, 3, 5])
y = np.array([2, -4, 6, 10])
print "Coefficients"
a = coef(x, y)

print a
#   Eval
print "Eval"
print "Eval -1 = ", Eval(a, x, -1)
print "Eval 1 = ", Eval(a, x, 1)
print "Eval 3 = ", Eval(a, x, 3)
print "Eval 5 = ", Eval(a, x, 5)
#------------------------------------
 

def L_0(x):
	return (-1.0/40.0)*(x-1.0)*(x-3.0)*(x-4.0)

def L_1(x):
	
	return (1.0/12.0)*(x+1.0)*(x-3.0)*(x-4.0)
	
def L_2(x):
	return (-1.0/8.0)*(x+1.0)*(x-1.0)*(x-4.0)

def L_3(x):
	return (1.0/15.0)*(x+1.0)*(x-1.0)*(x-3.0)

	
#-------------------functions call--------------------

y0 = []
y1 = []
y2 = []
y3 = []

xvals = np.linspace(-1.5, 4.5, 10000)
for x in xvals:
	y0.append(L_0(x))
	y1.append(L_1(x))
	y2.append(L_2(x))
	y3.append(L_3(x))

	
y0 = np.array(y0)
y1 = np.array(y1)
y2 = np.array(y2)

#---------------------Plotting----------------------------
plt.figure()
plt.plot(xvals ,y0, 'r', label='l_0') # L_0
plt.plot(xvals ,y1, 'b', label='l_1') # L_1
plt.plot(xvals, y2, 'g', label='l_2') # L_2
plt.plot(xvals, y3, 'p', label='l_3') # L_3
plt.legend()
plt.title('Lagrange functions interpolating for [-1 1 3 4]')

plt.show()